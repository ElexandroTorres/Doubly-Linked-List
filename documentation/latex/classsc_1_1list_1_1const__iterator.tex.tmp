\hypertarget{classsc_1_1list_1_1const__iterator}{}\section{sc\+:\+:list$<$ T $>$\+:\+:const\+\_\+iterator Class Reference}
\label{classsc_1_1list_1_1const__iterator}\index{sc\+::list$<$ T $>$\+::const\+\_\+iterator@{sc\+::list$<$ T $>$\+::const\+\_\+iterator}}


Const\+\_\+\+Iterator.  




{\ttfamily \#include $<$list.\+h$>$}



Collaboration diagram for sc\+:\+:list$<$ T $>$\+:\+:const\+\_\+iterator\+:
% FIG 0
\subsection*{Public Types}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_ac6875a18dfb339fc6e756970e49609cf}\label{classsc_1_1list_1_1const__iterator_ac6875a18dfb339fc6e756970e49609cf}} 
using {\bfseries reference} = T \&
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_aee5e56535254a6a14335fbc1383a2725}\label{classsc_1_1list_1_1const__iterator_aee5e56535254a6a14335fbc1383a2725}} 
using {\bfseries difference\+\_\+type} = std\+::ptrdiff\+\_\+t
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a026420ee01be8ae488a17a68c5c3370a}\label{classsc_1_1list_1_1const__iterator_a026420ee01be8ae488a17a68c5c3370a}} 
using {\bfseries iterator\+\_\+category} = std\+::bidirectional\+\_\+iterator\+\_\+tag
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a48860b30fef558a29ee9275da13b009a}\label{classsc_1_1list_1_1const__iterator_a48860b30fef558a29ee9275da13b009a}} 
using \hyperlink{classsc_1_1list_1_1const__iterator_a48860b30fef558a29ee9275da13b009a}{value\+\_\+type} = T
\begin{DoxyCompactList}\small\item\em Tipo de dado. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a241d0846fb348e834d0c9337bf8bd25d}\label{classsc_1_1list_1_1const__iterator_a241d0846fb348e834d0c9337bf8bd25d}} 
using \hyperlink{classsc_1_1list_1_1const__iterator_a241d0846fb348e834d0c9337bf8bd25d}{pointer} = T $\ast$
\begin{DoxyCompactList}\small\item\em Ponteiro para o tipo de dado. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\hyperlink{classsc_1_1list_1_1const__iterator_a3b68ca55b3d1330cecc9ae08020022cf}{const\+\_\+iterator} ()
\item 
\hyperlink{classsc_1_1list_1_1const__iterator_a0f238759dc418c80409694774cbdef3b}{const\+\_\+iterator} (const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&other)
\item 
const T \& \hyperlink{classsc_1_1list_1_1const__iterator_a32aafbcea528d2db2bc48a5bc81e46d8}{operator$\ast$} () const
\item 
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \& \hyperlink{classsc_1_1list_1_1const__iterator_a697f3bb58545ee5c3c0d8d821a2d6ccf}{operator++} ()
\item 
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \hyperlink{classsc_1_1list_1_1const__iterator_a7f659a312caded356c8d7eb99437e524}{operator++} (int)
\item 
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \& \hyperlink{classsc_1_1list_1_1const__iterator_aa400d21a07e6a88cd567754a323f06d8}{operator-\/-\/} ()
\item 
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \hyperlink{classsc_1_1list_1_1const__iterator_a545f4c1885ebf352d130f6d0b5cb0599}{operator-\/-\/} (int)
\item 
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \& \hyperlink{classsc_1_1list_1_1const__iterator_a510b36d19643b4c3f21d7870bb0bf7bc}{operator=} (const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&it)
\item 
bool \hyperlink{classsc_1_1list_1_1const__iterator_a6800bc3021f5e7aa9503ff7fb7dc6256}{operator==} (const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&rhs) const
\item 
bool \hyperlink{classsc_1_1list_1_1const__iterator_a435207dc50ba22045d8aa72c5ded7c26}{operator!=} (const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&rhs) const
\end{DoxyCompactItemize}
\subsection*{Protected Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_abb42cbfb1699cb7427d9ab8a4d683b92}\label{classsc_1_1list_1_1const__iterator_abb42cbfb1699cb7427d9ab8a4d683b92}} 
{\bfseries const\+\_\+iterator} (Node $\ast$p)
\end{DoxyCompactItemize}
\subsection*{Protected Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_ac8a1ecff3dcc804cd3fabfaf2360d461}\label{classsc_1_1list_1_1const__iterator_ac8a1ecff3dcc804cd3fabfaf2360d461}} 
Node $\ast$ {\bfseries current}
\end{DoxyCompactItemize}
\subsection*{Friends}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_ab6cf03d50c50087700b0fb872accfa7b}\label{classsc_1_1list_1_1const__iterator_ab6cf03d50c50087700b0fb872accfa7b}} 
class {\bfseries list$<$ T $>$}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
\subsubsection*{template$<$typename T$>$\newline
class sc\+::list$<$ T $>$\+::const\+\_\+iterator}

Const\+\_\+\+Iterator. 

\subsection{Constructor \& Destructor Documentation}
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a3b68ca55b3d1330cecc9ae08020022cf}\label{classsc_1_1list_1_1const__iterator_a3b68ca55b3d1330cecc9ae08020022cf}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!const\+\_\+iterator@{const\+\_\+iterator}}
\index{const\+\_\+iterator@{const\+\_\+iterator}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{const\+\_\+iterator()}{const\_iterator()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::const\+\_\+iterator (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Construtor padrão. Cria um iterator e inicializa o current como nulo. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a0f238759dc418c80409694774cbdef3b}\label{classsc_1_1list_1_1const__iterator_a0f238759dc418c80409694774cbdef3b}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!const\+\_\+iterator@{const\+\_\+iterator}}
\index{const\+\_\+iterator@{const\+\_\+iterator}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{const\+\_\+iterator()}{const\_iterator()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::const\+\_\+iterator (\begin{DoxyParamCaption}\item[{const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&}]{other }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Construtor copia. 

\subsection{Member Function Documentation}
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a435207dc50ba22045d8aa72c5ded7c26}\label{classsc_1_1list_1_1const__iterator_a435207dc50ba22045d8aa72c5ded7c26}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator"!=@{operator"!=}}
\index{operator"!=@{operator"!=}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator"!=()}{operator!=()}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
bool \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator!= (\begin{DoxyParamCaption}\item[{const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&}]{rhs }\end{DoxyParamCaption}) const\hspace{0.3cm}{\ttfamily [inline]}}

Compara dois iteradores constantes. \begin{DoxyReturn}{Returns}
true caso sejam diferentes e false caso contrario. 
\end{DoxyReturn}
\mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a32aafbcea528d2db2bc48a5bc81e46d8}\label{classsc_1_1list_1_1const__iterator_a32aafbcea528d2db2bc48a5bc81e46d8}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator$\ast$@{operator$\ast$}}
\index{operator$\ast$@{operator$\ast$}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator$\ast$()}{operator*()}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
const T\& \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator$\ast$ (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption}) const\hspace{0.3cm}{\ttfamily [inline]}}

Operador$\ast$, returna o dado presente no iterator. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a697f3bb58545ee5c3c0d8d821a2d6ccf}\label{classsc_1_1list_1_1const__iterator_a697f3bb58545ee5c3c0d8d821a2d6ccf}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator++@{operator++}}
\index{operator++@{operator++}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator++()}{operator++()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator}\& \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator++ (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Operator++, avança para o proximo nó. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a7f659a312caded356c8d7eb99437e524}\label{classsc_1_1list_1_1const__iterator_a7f659a312caded356c8d7eb99437e524}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator++@{operator++}}
\index{operator++@{operator++}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator++()}{operator++()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator++ (\begin{DoxyParamCaption}\item[{int}]{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Operator++, Avança para o proximo nó, mas retorna a posição antes de avançada. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_aa400d21a07e6a88cd567754a323f06d8}\label{classsc_1_1list_1_1const__iterator_aa400d21a07e6a88cd567754a323f06d8}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator-\/-\/@{operator-\/-\/}}
\index{operator-\/-\/@{operator-\/-\/}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator-\/-\/()}{operator--()}\hspace{0.1cm}{\footnotesize\ttfamily [1/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator}\& \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator-\/-\/ (\begin{DoxyParamCaption}{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Operator--, Regride para o nó anterior. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a545f4c1885ebf352d130f6d0b5cb0599}\label{classsc_1_1list_1_1const__iterator_a545f4c1885ebf352d130f6d0b5cb0599}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator-\/-\/@{operator-\/-\/}}
\index{operator-\/-\/@{operator-\/-\/}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator-\/-\/()}{operator--()}\hspace{0.1cm}{\footnotesize\ttfamily [2/2]}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator-\/-\/ (\begin{DoxyParamCaption}\item[{int}]{ }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Operator--, Regride para o nó anterior, mas retorna a posição antes da regreção. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a510b36d19643b4c3f21d7870bb0bf7bc}\label{classsc_1_1list_1_1const__iterator_a510b36d19643b4c3f21d7870bb0bf7bc}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator=@{operator=}}
\index{operator=@{operator=}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator=()}{operator=()}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
\hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator}\& \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator= (\begin{DoxyParamCaption}\item[{const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&}]{it }\end{DoxyParamCaption})\hspace{0.3cm}{\ttfamily [inline]}}

Operator =, Atribuí um \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} a outro. \mbox{\Hypertarget{classsc_1_1list_1_1const__iterator_a6800bc3021f5e7aa9503ff7fb7dc6256}\label{classsc_1_1list_1_1const__iterator_a6800bc3021f5e7aa9503ff7fb7dc6256}} 
\index{sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}!operator==@{operator==}}
\index{operator==@{operator==}!sc\+::list\+::const\+\_\+iterator@{sc\+::list\+::const\+\_\+iterator}}
\subsubsection{\texorpdfstring{operator==()}{operator==()}}
{\footnotesize\ttfamily template$<$typename T $>$ \\
bool \hyperlink{classsc_1_1list}{sc\+::list}$<$ T $>$\+::const\+\_\+iterator\+::operator== (\begin{DoxyParamCaption}\item[{const \hyperlink{classsc_1_1list_1_1const__iterator}{const\+\_\+iterator} \&}]{rhs }\end{DoxyParamCaption}) const\hspace{0.3cm}{\ttfamily [inline]}}

Compara dois iteradores constantes. \begin{DoxyReturn}{Returns}
true caso sejam iguais e false caso contrario. 
\end{DoxyReturn}


The documentation for this class was generated from the following file\+:\begin{DoxyCompactItemize}
\item 
/home/elexandro/\+Documentos/\+Doubly-\/\+Linked-\/\+List/include/list.\+h\end{DoxyCompactItemize}
